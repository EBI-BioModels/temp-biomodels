
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Kogan2013 - A mathematical model for the immunotherapeutic control of the TH1 TH2 imbalance in melanoma
#
# isDescribedBy http://identifiers.org/doi/10.3934/dcdsb.2013.18.1017
# is http://identifiers.org/biomodels.db/MODEL1912020001
# is http://identifiers.org/biomodels.db/BIOMD0000000881
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Function_for_IL_10_Production_DC, name = Function_for_IL-10_Production_DC
Function_(p_I,a_I,b_I,G)=(p_I*(a_I+(1-a_I)*b_I/(G+b_I)))


# FunctionDefinition id = Function_for_Th2_Recruitment, name = Function_for_Th2_Recruitment
Functio_1(c_2,L,d_1,r_T,b_2,G)=((c_2+(1-c_2)*d_1/(L+d_1))*r_T*b_2/(b_2+G))


# FunctionDefinition id = Function_for_IFN_gamma_Production_Th2, name = Function_for_IFN-gamma_Production_Th2
Functio_2(q_G,T_1,a_G,b_G,I,e_G,L,f_G)=(q_G*T_1*(a_G+(1-a_G)*b_G/(I+b_G))*(1+e_G*L/(L+f_G)))


# FunctionDefinition id = Function_for_Th1_Recruitment, name = Function_for_Th1_Recruitment
Functio_3(r_T,b_1,I,c_1,L,d_1)=((1+c_1*L/(L+d_1))*r_T*b_1/(b_1+I))


# FunctionDefinition id = Function_for_IFN_gamma_Production_NK_CTL, name = Function_for_IFN-gamma_Production_NK_CTL
Functio_4(p_G,c_G,L,d_G)=(p_G*(1+c_G*L/(L+d_G)))


# FunctionDefinition id = Function_for_IL_10_Production_Th1, name = Function_for_IL-10_Production_Th1
Functio_5(q_I,T_2)=(q_I*T_2)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  mu_T, name = mu_T, constant
par mu_T=0.001

# Parameter:   id =  r_T, name = r_T, constant
par r_T=1000.0

# Parameter:   id =  a_1, name = a_1, constant
par a_1=0.0

# Parameter:   id =  b_1, name = b_1, constant
par b_1=0.35

# Parameter:   id =  a_2, name = a_2, constant
par a_2=0.0

# Parameter:   id =  b_2, name = b_2, constant
par b_2=0.18

# Parameter:   id =  mu_G, name = mu_G, constant
par mu_G=0.6

# Parameter:   id =  q_G, name = q_G, constant
par q_G=1.0E-7

# Parameter:   id =  p_G, name = p_G, constant
par p_G=0.016

# Parameter:   id =  a_G, name = a_G, constant
par a_G=0.59

# Parameter:   id =  b_G, name = b_G, constant
par b_G=0.13

# Parameter:   id =  mu_I, name = mu_I, constant
par mu_I=0.36

# Parameter:   id =  q_I, name = q_I, constant
par q_I=1.0E-7

# Parameter:   id =  p_I, name = p_I, constant
par p_I=0.5

# Parameter:   id =  a_I, name = a_I, constant
par a_I=0.12

# Parameter:   id =  b_I, name = b_I, constant
par b_I=0.025

# Parameter:   id =  c_1, name = c_1, constant
par c_1=30.0

# Parameter:   id =  d_1, name = d_1, constant
par d_1=0.8

# Parameter:   id =  d_2, name = d_2, constant
par d_2=0.8

# Parameter:   id =  c_2, name = c_2, constant
par c_2=0.1

# Parameter:   id =  c_G, name = c_G, constant
par c_G=12.0

# Parameter:   id =  d_G, name = d_G, constant
par d_G=0.05

# Parameter:   id =  e_G, name = e_G, constant
par e_G=5.4

# Parameter:   id =  f_G, name = f_G, constant
par f_G=0.22

# Parameter:   id =  L, name = L, constant
par L=0.0

# Parameter:   id =  T_1_e5, name = T_1_e5, defined by a Rule

# Parameter:   id =  T_2_e5, name = T_2_e5, defined by a Rule

# assignmentRule: variable = T_1_e5
T_1_e5=T_1/100000
aux T_1_e5=T_1_e5

# assignmentRule: variable = T_2_e5
T_2_e5=T_2/100000
aux T_2_e5=T_2_e5

# Reaction: id = Th1_Recruitment, name = Th1_Recruitment

Th1_Recru=compartme*Functio_3(r_T, b_1, I, c_1, L, d_1)

# Reaction: id = Th1_Elimination, name = Th1_Elimination

Th1_Elimi=compartme*mu_T*T_1

# Reaction: id = Th2_Recruitment, name = Th2_Recruitment

Th2_Recru=compartme*Functio_1(c_2, L, d_1, r_T, b_2, G)

# Reaction: id = Th2_Elimination, name = Th2_Elimination

Th2_Elimi=compartme*mu_T*T_2

# Reaction: id = IFN_gamma_Production_NK_CTL, name = IFN-gamma_Production_NK_CTL

IFN_gamma=compartme*Functio_4(p_G, c_G, L, d_G)

# Reaction: id = IFN_gamma_Production_Th2, name = IFN-gamma_Production_Th2

IFN_gam_1=compartme*Functio_2(q_G, T_1, a_G, b_G, I, e_G, L, f_G)

# Reaction: id = IFN_gamma_Elimination, name = IFN-gamma_Elimination

IFN_gam_2=compartme*mu_G*G

# Reaction: id = IL_10_Production_DC, name = IL-10_Production_DC

IL_10_Pro=compartme*Function_(p_I, a_I, b_I, G)

# Reaction: id = IL_10_Production_Th1, name = IL-10_Production_Th1

IL_10_P_1=compartme*Functio_5(q_I, T_2)

# Reaction: id = IL_10_Elimination, name = IL-10_Elimination

IL_10_Eli=compartme*mu_I*I

# Species:   id = T_1, name = T_1, affected by kineticLaw

init T_1=500000.0
dT_1/dt=(1/(compartme))*(( 1.0 * Th1_Recru) + (-1.0 * Th1_Elimi))

# Species:   id = T_2, name = T_2, affected by kineticLaw

init T_2=1000000.0
dT_2/dt=(1/(compartme))*(( 1.0 * Th2_Recru) + (-1.0 * Th2_Elimi))

# Species:   id = G, name = G, affected by kineticLaw

init G=1.0
dG/dt=(1/(compartme))*(( 1.0 * IFN_gamma) + ( 1.0 * IFN_gam_1) + (-1.0 * IFN_gam_2))

# Species:   id = I, name = I, affected by kineticLaw

init I=1.0
dI/dt=(1/(compartme))*(( 1.0 * IL_10_Pro) + ( 1.0 * IL_10_P_1) + (-1.0 * IL_10_Eli))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

