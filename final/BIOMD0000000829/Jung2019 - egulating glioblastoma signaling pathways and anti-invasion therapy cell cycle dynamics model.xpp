
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Jung2019 - egulating glioblastoma signaling pathways and anti-invasion therapy cell cycle dynamics model
#
# is http://identifiers.org/biomodels.db/MODEL1910020001
# is http://identifiers.org/biomodels.db/BIOMD0000000829
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = Degradation_of_p55cdc_T_0, name = Degradation of p55cdc_T
Degradati(k_6,p55cdc_T)=(k_6*p55cdc_T)


# FunctionDefinition id = Production_of_CycB_0, name = Production of CycB
Productio(k_1)=(k_1)


# FunctionDefinition id = Degradation_of_CycB_0, name = Degradation of CycB
Degrada_1(k_21,CycB)=(k_21*CycB)


# FunctionDefinition id = Degradation_of_CycB_by_Cdh1_0, name = Degradation of CycB by Cdh1
Degrada_2(k_22,Cdh1,CycB)=(k_22*Cdh1*CycB)


# FunctionDefinition id = Inhibitory_effect_of_p21_or_p27_genes, name = Inhibitory effect of p21 or p27 genes
Inhibitor(_p27_p21,HIF,CycB)=(_p27_p21*HIF*CycB)


# FunctionDefinition id = Activation_of_Cdh1_by_p55cdc_A_0, name = Activation of Cdh1 by p55cdc_A
Activatio(k_32,p55cdc_A,Cdh1,J_3)=(k_32*p55cdc_A*(1-Cdh1)/(J_3+1-Cdh1))


# FunctionDefinition id = Activation_of_Cdh1_0, name = Activation of Cdh1
Activat_1(k_31,Cdh1,J_3)=(k_31*(1-Cdh1)/(J_3+1-Cdh1))


# FunctionDefinition id = Inactivation_of_Cdh1_by_CycB_0, name = Inactivation of Cdh1 by CycB
Inactivat(k_4,mass_s,CycB,Cdh1,J_4)=(k_4*mass_s*CycB*Cdh1/(J_4+Cdh1))


# FunctionDefinition id = Production_of_p55cd_T, name = Production of p55cd_T
Product_1(k_51)=(k_51)


# FunctionDefinition id = transcription_of_p55dc_T_by_CycB, name = transcription of p55dc_T by CycB
transcrip(k_52,CycB,mass_s,n,J_5)=(k_52*(CycB*mass_s)^n/(J_5^n+(CycB*mass_s)^n))


# FunctionDefinition id = grow_of_mass_0, name = grow of mass
grow_of_m(myu,mass,_m_)=(myu*mass*(1-mass/_m_))


# FunctionDefinition id = Degradation_of_p55cdc_A_0, name = Degradation of p55cdc_A
Degrada_3(k_6,p55cdc_A)=(k_6*p55cdc_A)


# FunctionDefinition id = Inactivation_of_p55cdc_A_0, name = Inactivation of p55cdc_A
Inactiv_1(k_8,Mad,p55cdc_A,J_8)=(k_8*Mad*p55cdc_A/(J_8+p55cdc_A))


# FunctionDefinition id = Activation_of_p55cdc_A_by_Plk1_0, name = Activation of p55cdc_A by Plk1
Activat_2(k_7,Plk1,p55cdc_T,p55cdc_A,J_7)=(k_7*Plk1*(p55cdc_T-p55cdc_A)/(J_7+p55cdc_T-p55cdc_A))


# FunctionDefinition id = Activation_of_Plk1_by_CycB_0, name = Activation of Plk1 by CycB
Activat_3(k_9,mass_s,CycB,Plk1)=(k_9*mass_s*CycB*(1-Plk1))


# FunctionDefinition id = degradation_of_Plk1, name = degradation of Plk1
degrada_4(k_10,Plk1)=(k_10*Plk1)


# FunctionDefinition id = Dose_for_Drug_0, name = Dose for Drug
Dose_for_(u_2)=(u_2)


# FunctionDefinition id = Dose_for_Glucose_0, name = Dose for Glucose
Dose_fo_1(u_1)=(u_1)


# FunctionDefinition id = Consumption_of_Glucose_0, name = Consumption of Glucose
Consumpti(myu_G,G)=(myu_G*G)


# FunctionDefinition id = Decay_of_Drug_0, name = Decay of Drug
Decay_of_(myu_D,D)=(myu_D*D)


# FunctionDefinition id = production_of_miR_451, name = production of miR-451
product_2(G,l_1,l_2,alpha,A)=(G+l_1*l_2^2/(l_2^2+alpha*A^2))


# FunctionDefinition id = loss_of_miR_451_0, name = loss of miR-451
loss_of_m(M)=(M)


# FunctionDefinition id = signal_source_of_AMPK_0, name = signal source of AMPK
signal_so(S_1,episilon_1)=(S_1/episilon_1)


# FunctionDefinition id = production_of_AMPK, name = production of AMPK
product_3(l_3,l_4,epsilon_1,beta,M)=(l_3*l_4^2/(epsilon_1*(l_4^2+beta*M^2)))


# FunctionDefinition id = loss_of_AMPK_0, name = loss of AMPK
loss_of_A(A,epsilon_1)=(A/epsilon_1)


# FunctionDefinition id = signal_source_of_mTOR_0, name = signal source of mTOR
signal__1(S_2,epsilon_2)=(S_2/epsilon_2)


# FunctionDefinition id = production_of_mTOR, name = production of mTOR
product_4(l_5,l_6,epsilon_2,dletaD,gamma,A)=(l_5*l_6^2/(epsilon_2*(l_6^2+dletaD*gamma*A^2)))


# FunctionDefinition id = loss_of_mTOR_0, name = loss of mTOR
loss_of_1(R,epsilon_2)=(R/epsilon_2)


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  myu_G, name = myu_G, constant
par myu_G=0.5

# Parameter:   id =  l_1, name = l_1, constant
par l_1=4.0

# Parameter:   id =  l_2, name = l_2, constant
par l_2=1.0

# Parameter:   id =  alpha, name = alpha, constant
par alpha=1.6

# Parameter:   id =  l_3, name = l_3, constant
par l_3=4.0

# Parameter:   id =  l_4, name = l_4, constant
par l_4=1.0

# Parameter:   id =  beta, name = beta, constant
par beta=1.0

# Parameter:   id =  S_1, name = S_1, constant
par S_1=0.2

# Parameter:   id =  epsilon_1, name = epsilon_1, constant
par epsilon_1=0.02

# Parameter:   id =  l_5, name = l_5, constant
par l_5=4.0

# Parameter:   id =  l_6, name = l_6, constant
par l_6=1.0

# Parameter:   id =  gamma, name = gamma, constant
par gamma=1.0

# Parameter:   id =  S_2, name = S_2, constant
par S_2=1.2

# Parameter:   id =  epsilon_2, name = epsilon_2, constant
par epsilon_2=0.02

# Parameter:   id =  myu_D, name = myu_D, constant
par myu_D=1.316

# Parameter:   id =  u_1, name = u_1
par u_1=0.0

# Parameter:   id =  u_2, name = u_2
par u_2=0.0

# Parameter:   id =  k_1, name = k_1, constant
par k_1=0.12

# Parameter:   id =  k_2, name = k_2', constant
par k_2=0.12

# Parameter:   id =  k_2_, name = k_2'', constant
par k_2_=4.5

# Parameter:   id =  p27_p21, name = p27/p21, constant
par p27_p21=1.05

# Parameter:   id =  HIF, name = HIF, defined by a Rule

# Parameter:   id =  zeta_2, name = zeta_2, constant
par zeta_2=1.0

# Parameter:   id =  K, name = K, constant
par K=0.01

# Parameter:   id =  n_2, name = n_2, constant
par n_2=10.0

# Parameter:   id =  K_H, name = K_H, constant
par K_H=10.0

# Parameter:   id =  k_3, name = k_3', constant
par k_3=3.0

# Parameter:   id =  k_3_, name = k_3'', constant
par k_3_=30.0

# Parameter:   id =  k_4, name = k_4, constant
par k_4=105.0

# Parameter:   id =  J_3, name = J_3, constant
par J_3=0.04

# Parameter:   id =  J_4, name = J_4, constant
par J_4=0.04

# Parameter:   id =  zeta_1, name = zeta_1, constant
par zeta_1=2.5

# Parameter:   id =  n_1, name = n_1, constant
par n_1=10.0

# Parameter:   id =  K_m, name = K_m, constant
par K_m=0.5

# Parameter:   id =  k_5, name = k_5', constant
par k_5=0.015

# Parameter:   id =  k_5_, name = k_5'', constant
par k_5_=0.6

# Parameter:   id =  k_6, name = k_6, constant
par k_6=0.3

# Parameter:   id =  n, name = n, constant
par n=4.0

# Parameter:   id =  J_5, name = J_5, constant
par J_5=0.3

# Parameter:   id =  k_7, name = k_7, constant
par k_7=3.0

# Parameter:   id =  J_7, name = J_7, constant
par J_7=0.001

# Parameter:   id =  k_8, name = k_8, constant
par k_8=1.5

# Parameter:   id =  J_8, name = J_8, constant
par J_8=0.001

# Parameter:   id =  Mad, name = Mad, constant
par Mad=1.0

# Parameter:   id =  k_9, name = k_9, constant
par k_9=0.3

# Parameter:   id =  k_10, name = k_10, constant
par k_10=0.06

# Parameter:   id =  myu, name = myu+, constant
par myu=0.03

# Parameter:   id =  epsilon, name = epsilon, constant
par epsilon=0.006

# Parameter:   id =  myu_0, name = myu, defined by a Rule

# Parameter:   id =  myu_hat, name = myu_hat, constant
par myu_hat=0.5

# Parameter:   id =  m, name = m*, constant
par m=10.0

# assignmentRule: variable = HIF
HIF=zeta_2/(K^n_2*(K_H^n_2+(1/K)^n_2))
aux HIF=HIF

# assignmentRule: variable = myu_0
myu_0=myu+epsilon*myu_hat
aux myu_0=myu_0

# assignmentRule: variable = mass_s
mass_s=mass+zeta_1*(1/mTOR_R)^n_1/(K_m^n_1+(1/mTOR_R)^n_1)
aux mass_s=mass_s

# assignmentRule: variable = deltaD
deltaD=exp(-Drug_D)
aux deltaD=deltaD

# Reaction: id = Dose_for_Glucose, name = Dose for Glucose

Dose_fo_2=compartme*Dose_fo_1(u_1)

# Reaction: id = Dose_for_Drug, name = Dose for Drug

Dose_fo_3=compartme*Dose_for_(u_2)

# Reaction: id = Consumption_of_Glucose, name = Consumption of Glucose

Consump_1=compartme*Consumpti(myu_G, Glucose_G)

# Reaction: id = Decay_of_Drug, name = Decay of Drug

Decay_o_1=compartme*Decay_of_(myu_D, Drug_D)

# Reaction: id = Production_of_miR_451, name = Production of miR-451

Product_5=compartme*product_2(Glucose_G, l_1, l_2, alpha, AMPK_A)

# Reaction: id = loss_of_miR_451, name = loss of miR-451

loss_of_2=compartme*loss_of_m(miR_451_M)

# Reaction: id = signal_source_of_AMPK, name = signal source of AMPK

signal__2=compartme*signal_so(S_1, epsilon_1)

# Reaction: id = Production_of_AMPK, name = Production of AMPK

Product_6=compartme*product_3(l_3, l_4, epsilon_1, beta, miR_451_M)

# Reaction: id = loss_of_AMPK, name = loss of AMPK

loss_of_3=compartme*loss_of_A(AMPK_A, epsilon_1)

# Reaction: id = signal_source_of_mTOR, name = signal source of mTOR

signal__3=compartme*signal__1(S_2, epsilon_2)

# Reaction: id = Production_of_mTOR, name = Production of mTOR

Product_7=compartme*product_4(l_5, l_6, epsilon_2, deltaD, gamma, AMPK_A)

# Reaction: id = loss_of_mTOR, name = loss of mTOR

loss_of_4=compartme*loss_of_1(mTOR_R, epsilon_2)

# Reaction: id = Activation_of_Cdh1, name = Activation of Cdh1

Activat_4=compartme*Activat_1(k_3, Cdh1, J_3)

# Reaction: id = Activation_of_Cdh1_by_p55cdc_A, name = Activation of Cdh1 by p55cdc_A

Activat_5=compartme*Activatio(k_3_, p55cdc_A, Cdh1, J_3)

# Reaction: id = Degradation_of_CycB, name = Degradation of CycB

Degrada_5=compartme*Degrada_1(k_2, CycB)

# Reaction: id = Degradation_of_CycB_by_Cdh1, name = Degradation of CycB by Cdh1

Degrada_6=compartme*Degrada_2(k_2_, Cdh1, CycB)

# Reaction: id = Degradation_of_p55cdc_T, name = Degradation of p55cdc_T

Degrada_7=compartme*Degradati(k_6, p55cdc_T)

# Reaction: id = Inactivation_of_Cdh1_by_CycB, name = Inactivation of Cdh1 by CycB

Inactiv_2=compartme*Inactivat(k_4, mass_s, CycB, Cdh1, J_4)

# Reaction: id = inhibitory_effect_of_p21_or_p27_genes, name = inhibitory effect of p21 or p27 genes

inhibit_1=compartme*Inhibitor(p27_p21, HIF, CycB)

# Reaction: id = Production_of_CycB, name = Production of CycB

Product_8=compartme*Productio(k_1)

# Reaction: id = production_of_p55cdc_T, name = production of p55cdc_T

product_9=compartme*Product_1(k_5)

# Reaction: id = transcription_of_p55cdc_T_by_CycB, name = transcription of p55cdc_T by CycB

transcr_1=compartme*transcrip(k_5_, CycB, mass_s, n, J_5)

# Reaction: id = Activation_of_p55cdc_A_by_Plk1, name = Activation of p55cdc_A by Plk1

Activat_6=compartme*Activat_2(k_7, Plk1, p55cdc_T, p55cdc_A, J_7)

# Reaction: id = Inactivation_of_p55cdc_A, name = Inactivation of p55cdc_A

Inactiv_3=compartme*Inactiv_1(k_8, Mad, p55cdc_A, J_8)

# Reaction: id = Degradation_of_p55cdc_A, name = Degradation of p55cdc_A

Degrada_8=compartme*Degrada_3(k_6, p55cdc_A)

# Reaction: id = Activation_of_Plk1_by_CycB, name = Activation of Plk1 by CycB

Activat_7=compartme*Activat_3(k_9, mass_s, CycB, Plk1)

# Reaction: id = Degradation_of_Plk1, name = Degradation of Plk1

Degrada_9=compartme*degrada_4(k_10, Plk1)

# Reaction: id = grow_of_mass, name = grow of mass

grow_of_1=compartme*grow_of_m(myu_0, mass, m)

# Species:   id = Glucose_G, name = Glucose G, affected by kineticLaw

init Glucose_G=6.64215616170866E-22
dGlucose_G/dt=(1/(compartme))*(( 1.0 * Dose_fo_2) + (-1.0 * Consump_1))

# Species:   id = Drug_D, name = Drug D, affected by kineticLaw

init Drug_D=0.0
dDrug_D/dt=(1/(compartme))*(( 1.0 * Dose_fo_3) + (-1.0 * Decay_o_1))

# Species:   id = miR_451_M, name = miR-451 M, affected by kineticLaw

init miR_451_M=3.05539183438598E-21
dmiR_451_M/dt=(1/(compartme))*(( 1.0 * Product_5) + (-1.0 * loss_of_2))

# Species:   id = AMPK_A, name = AMPK A, affected by kineticLaw

init AMPK_A=2.07567380053396E-21
dAMPK_A/dt=(1/(compartme))*(( 1.0 * signal__2) + ( 1.0 * Product_6) + (-1.0 * loss_of_3))

# Species:   id = mTOR_R, name = mTOR R, affected by kineticLaw

init mTOR_R=4.58308775157897E-21
dmTOR_R/dt=(1/(compartme))*(( 1.0 * signal__3) + ( 1.0 * Product_7) + (-1.0 * loss_of_4))

# Species:   id = deltaD, name = deltaD, involved in a rule 

# Species:   id = Cdh1, name = Cdh1, affected by kineticLaw

init Cdh1=1.0
dCdh1/dt=(1/(compartme))*(( 1.0 * Activat_4) + ( 1.0 * Activat_5) + (-1.0 * Inactiv_2))

# Species:   id = CycB, name = CycB, affected by kineticLaw

init CycB=0.1
dCycB/dt=(1/(compartme))*((-1.0 * Degrada_5) + (-1.0 * Degrada_6) + (-1.0 * inhibit_1) + ( 1.0 * Product_8))

# Species:   id = p55cdc_T, name = p55cdc_T, affected by kineticLaw

init p55cdc_T=1.0
dp55cdc_T/dt=(1/(compartme))*((-1.0 * Degrada_7) + ( 1.0 * product_9) + ( 1.0 * transcr_1))

# Species:   id = mass, name = mass, affected by kineticLaw

init mass=0.45
dmass/dt=(1/(compartme))*(( 1.0 * grow_of_1))

# Species:   id = mass_s, name = mass_s, involved in a rule 

# Species:   id = p55cdc_A, name = p55cdc_A, affected by kineticLaw

init p55cdc_A=0.85
dp55cdc_A/dt=(1/(compartme))*(( 1.0 * Activat_6) + (-1.0 * Inactiv_3) + (-1.0 * Degrada_8))

# Species:   id = Plk1, name = Plk1, affected by kineticLaw

init Plk1=0.6
dPlk1/dt=(1/(compartme))*(( 1.0 * Activat_7) + (-1.0 * Degrada_9))

# event : event
event=if (piecewise(t-12*ceil(t/12),  xor (t < 0, 12 < 0), t-12*flr(t/12)) == 0) then (1.5) else (0.2)
global 1 {event - 1.1} {u_1=u_1+1;u_2=u_2+1}

# event : event_2
event_2=if ((((((((((((((t == 3) || (t == 15)) || (t == 27)) || (t == 39)) || (t == 51)) || (t == 63)) || (t == 75)) || (t == 87)) || (t == 99)) || (t == 111)) || (t == 123)) || (t == 135)) || (t == 147)) || (t == 159)) then (1.5) else (0.2)
global 1 {event_2 - 1.1} {u_1=u_1-1;u_2=u_2-1}

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

